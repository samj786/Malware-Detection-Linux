#ifndef PROCESSES_H
#define PROCESSES_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <dirent.h>
#include <sys/stat.h>
#include <pwd.h>
#include <openssl/sha.h>
#include <pthread.h>
#include <ctype.h>
#include <sys/types.h>

#define MAX_PROC 1024
#define MAX_HASH_LEN 1024
#define PATH_MAX 4096
#define MAX_LINE 1024

typedef struct {
    int pid;
    char name[256];
    char state;
    unsigned long utime;
    unsigned long stime;
    unsigned long rss;
    char sha256_hash[SHA256_DIGEST_LENGTH * 2 + 1];
    char fuzzy_hash[MAX_HASH_LEN];
} ProcessInfo;

// Structure for malware information from database
typedef struct {
    char hash[65];    // SHA256 hash is 64 chars + null terminator
    char file_name[256];
    char file_type_guess[128];
    char mime_type[128];
    char signature[256];
} MalwareInfo;

// Global array to store process information
extern ProcessInfo *process_info_array;
extern size_t process_count;

// Function declarations
const char* process_state(char state);
void compute_sha256(const char *file_path, unsigned char *output_hash);
void hash_to_hex_string(unsigned char *hash, char *output_string);
void compute_fuzzy_hash(const char *file_path, char *output_hash);
int start();

// Hash checking function
int binary_search_hash(const char *target_hash, const char *filename, MalwareInfo *info);

// Threading structures
typedef struct {
    int start_index;
    int end_index;
    int thread_id;
} ThreadData;

#endif // PROCESSES_H